basePath: /
definitions:
  data.Association:
    properties:
      created_at:
        type: string
      id:
        type: string
      organization:
        $ref: '#/definitions/data.Organization'
      organization_id:
        type: string
      permissions:
        items:
          $ref: '#/definitions/data.PermissionsEnum'
        type: array
      status:
        $ref: '#/definitions/data.OrganizationStatus'
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  data.Organization:
    properties:
      address:
        additionalProperties: {}
        type: object
      contact_info:
        type: string
      created_at:
        type: string
      formatted_address:
        type: string
      id:
        type: string
      is_deleted:
        type: boolean
      logo_url:
        type: string
      name:
        type: string
      organization_type:
        $ref: '#/definitions/data.OrganizationType'
      scac:
        type: string
      unique_url:
        type: string
      updated_at:
        type: string
    type: object
  data.OrganizationStatus:
    enum:
    - pending
    - active
    - inactive
    type: string
    x-enum-varnames:
    - Pending
    - Active
    - Inactive
  data.OrganizationType:
    enum:
    - airline
    - carrier
    - warehouse
    type: string
    x-enum-varnames:
    - Airline
    - Carrier
    - Warehouse
  data.PatchOrganizationRequest:
    properties:
      address:
        additionalProperties: {}
        type: object
      contact_info:
        type: string
      logo_url:
        type: string
      name:
        type: string
      organization_type:
        $ref: '#/definitions/data.OrganizationType'
    type: object
  data.PatchUserRequest:
    properties:
      password:
        type: string
      user_name:
        type: string
    type: object
  data.PermissionsEnum:
    enum:
    - organization.write
    type: string
    x-enum-varnames:
    - WriteOrganization
  data.PostOrganizationRequest:
    properties:
      address:
        additionalProperties: {}
        type: object
      contact_info:
        type: string
      name:
        type: string
      organization_type:
        $ref: '#/definitions/data.OrganizationType'
    type: object
  data.PostUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  data.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      updated_at:
        type: string
      user_name:
        type: string
    type: object
  handlers.ApiError:
    properties:
      error:
        type: string
      status:
        type: integer
    type: object
  handlers.PostAuthRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  handlers.PostAuthResetConfirm:
    properties:
      confirm_code:
        type: string
      new_password:
        type: string
    type: object
  handlers.PostAuthResetRequest:
    properties:
      email:
        type: string
    type: object
  handlers.PostAuthResponse:
    properties:
      token:
        type: string
    type: object
info:
  contact: {}
  description: API for the ULD Management System
  title: Rest API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Retrive token for bearer authentication
      parameters:
      - description: Login Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.PostAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token Response
          schema:
            $ref: '#/definitions/handlers.PostAuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ApiError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ApiError'
      summary: Retrive token for bearer authentication
      tags:
      - Auth
  /auth/logout:
    delete:
      consumes:
      - application/json
      description: Removes HttpOnly cookie from client
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Removes HttpOnly cookie from client
      tags:
      - Auth
  /auth/reset/confirm:
    post:
      consumes:
      - application/json
      description: Confirms a password reset
      parameters:
      - description: Reset Confirm
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.PostAuthResetConfirm'
      produces:
      - application/json
      responses:
        "200":
          description: User
          schema:
            $ref: '#/definitions/data.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ApiError'
      summary: Confirms a password reset
      tags:
      - Auth
  /auth/reset/request:
    post:
      consumes:
      - application/json
      description: Requests a password reset
      parameters:
      - description: Reset Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.PostAuthResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User
          schema:
            $ref: '#/definitions/data.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ApiError'
      summary: Requests a password reset
      tags:
      - Auth
  /health:
    get:
      consumes:
      - application/json
      description: Health check
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Health check
      tags:
      - Health
  /organization:
    post:
      consumes:
      - application/json
      description: Create a new organization
      parameters:
      - description: Create Organization Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/data.PostOrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Organization
          schema:
            $ref: '#/definitions/data.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ApiError'
      summary: Create a new organization
      tags:
      - Organization
  /organization/{ID}:
    delete:
      consumes:
      - application/json
      description: Delete organization by ID
      parameters:
      - description: Organization ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Organization
          schema:
            $ref: '#/definitions/data.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Delete organization by ID
      tags:
      - Organization
    get:
      consumes:
      - application/json
      description: Get organization by ID
      parameters:
      - description: Organization ID
        in: path
        name: ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Organization
          schema:
            $ref: '#/definitions/data.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Get organization by ID
      tags:
      - Organization
    patch:
      consumes:
      - application/json
      description: Patch organization by ID
      parameters:
      - description: Organization ID
        in: path
        name: ID
        required: true
        type: string
      - description: Patch Organization Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/data.PatchOrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Organization
          schema:
            $ref: '#/definitions/data.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Patch organization by ID
      tags:
      - Organization
  /user:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: Create User Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/data.PostUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User
          schema:
            $ref: '#/definitions/data.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ApiError'
      summary: Create a new user
      tags:
      - User
  /user/me:
    get:
      consumes:
      - application/json
      description: Get user by apiKey
      produces:
      - application/json
      responses:
        "200":
          description: User
          schema:
            $ref: '#/definitions/data.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Get user by apiKey
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: Patch user by apiKey
      parameters:
      - description: Patch User Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/data.PatchUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User
          schema:
            $ref: '#/definitions/data.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Patch user by apiKey
      tags:
      - User
  /user_associations/me:
    get:
      consumes:
      - application/json
      description: Get associations by apiKey
      parameters:
      - collectionFormat: csv
        description: 'Allowed: [''organizations'']'
        in: query
        items:
          type: string
        name: expand
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Associations
          schema:
            items:
              $ref: '#/definitions/data.Association'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Get associations by apiKey
      tags:
      - User Associations
securityDefinitions:
  Bearer Authentication:
    description: A valid JWT token with Bearer prefix
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
